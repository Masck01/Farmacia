// <auto-generated />
using System;
using FarmaciaAvellaneda.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FarmaciaAvellaneda.Migrations
{
    [DbContext(typeof(FarmaciaAvellanedaContext))]
    [Migration("20201113231053_SecondMigration")]
    partial class SecondMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Caja", b =>
                {
                    b.Property<int>("IdCaja")
                        .HasColumnName("idCaja")
                        .HasColumnType("int");

                    b.Property<byte?>("Estado")
                        .HasColumnName("estado")
                        .HasColumnType("tinyint");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("Saldo")
                        .HasColumnName("saldo")
                        .HasColumnType("float");

                    b.HasKey("IdCaja")
                        .HasName("PK__Caja__8BC79B34F17EDF9F");

                    b.ToTable("Caja");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Capacidad", b =>
                {
                    b.Property<int>("IdCapacidad")
                        .HasColumnName("idCapacidad")
                        .HasColumnType("int");

                    b.Property<int?>("Cantidad")
                        .HasColumnName("cantidad")
                        .HasColumnType("int");

                    b.Property<byte?>("Estado")
                        .HasColumnName("estado")
                        .HasColumnType("tinyint");

                    b.Property<int>("ProductoId")
                        .HasColumnName("productoId")
                        .HasColumnType("int");

                    b.HasKey("IdCapacidad")
                        .HasName("PK__Capacida__DC4ADD50E487B485");

                    b.HasIndex("ProductoId");

                    b.ToTable("Capacidad");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .HasColumnName("idCategoria")
                        .HasColumnType("int");

                    b.Property<byte?>("Estado")
                        .HasColumnName("estado")
                        .HasColumnType("tinyint");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.HasKey("IdCategoria")
                        .HasName("PK__Categori__8A3D240C82E6A00D");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Compra", b =>
                {
                    b.Property<int>("IdCompra")
                        .HasColumnName("idCompra")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnName("fecha")
                        .HasColumnType("datetime");

                    b.Property<double?>("Total")
                        .HasColumnName("total")
                        .HasColumnType("float");

                    b.HasKey("IdCompra")
                        .HasName("PK__Compra__48B99DB73C722341");

                    b.ToTable("Compra");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Concepto", b =>
                {
                    b.Property<int>("IdConcepto")
                        .HasColumnName("idConcepto")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<double?>("MontoFijo")
                        .HasColumnName("montoFijo")
                        .HasColumnType("float");

                    b.Property<double?>("MontoVariable")
                        .HasColumnName("montoVariable")
                        .HasColumnType("float");

                    b.Property<byte?>("Tipo")
                        .HasColumnName("tipo")
                        .HasColumnType("tinyint");

                    b.HasKey("IdConcepto")
                        .HasName("PK__Concepto__25A881FDD15B03CA");

                    b.ToTable("Concepto");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.DetalleLiquidacion", b =>
                {
                    b.Property<int>("IdDetalleLlquidacion")
                        .HasColumnName("idDetalleLlquidacion")
                        .HasColumnType("int");

                    b.Property<int>("ConceptoId")
                        .HasColumnName("conceptoId")
                        .HasColumnType("int");

                    b.Property<string>("Haberes")
                        .HasColumnName("haberes")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int>("LiquidacionId")
                        .HasColumnName("liquidacionId")
                        .HasColumnType("int");

                    b.Property<int?>("Unidad")
                        .HasColumnName("unidad")
                        .HasColumnType("int");

                    b.HasKey("IdDetalleLlquidacion")
                        .HasName("PK__DetalleL__ADA04E144A7130B5");

                    b.HasIndex("ConceptoId");

                    b.HasIndex("LiquidacionId");

                    b.ToTable("DetalleLiquidacion");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Empleado", b =>
                {
                    b.Property<int>("IdEmpleado")
                        .HasColumnName("idEmpleado")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .HasColumnName("apellido")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Celular")
                        .HasColumnName("celular")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("Cuit")
                        .HasColumnName("cuit")
                        .HasColumnType("int");

                    b.Property<string>("Domicilio")
                        .HasColumnName("domicilio")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<byte?>("Estado")
                        .HasColumnName("estado")
                        .HasColumnType("tinyint");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Telefono")
                        .HasColumnName("telefono")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdEmpleado")
                        .HasName("PK__Empleado__5295297C1AA21034");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasName("UQ__Empleado__CB9A1CFEFEE2F234");

                    b.ToTable("Empleado");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.GrupoFamiliar", b =>
                {
                    b.Property<int>("IdGrupofamiliar")
                        .HasColumnName("idGrupofamiliar")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .HasColumnName("apellido")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("Dni")
                        .HasColumnName("dni")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnName("empleadoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnName("fechaNacimiento")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Parentesco")
                        .HasColumnName("parentesco")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("IdGrupofamiliar")
                        .HasName("PK__GrupoFam__3D65669A3B5BD5A0");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("GrupoFamiliar");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.LineaDeCompra", b =>
                {
                    b.Property<int>("IdLineadecompra")
                        .HasColumnName("idLineadecompra")
                        .HasColumnType("int");

                    b.Property<int?>("Cantidad")
                        .HasColumnName("cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CompraId")
                        .HasColumnName("compraId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnName("productoId")
                        .HasColumnType("int");

                    b.Property<double?>("Subtotal")
                        .HasColumnName("subtotal")
                        .HasColumnType("float");

                    b.HasKey("IdLineadecompra")
                        .HasName("PK__LineaDeC__19C9D5BEA84680FF");

                    b.HasIndex("CompraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("LineaDeCompra");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.LineaDeVenta", b =>
                {
                    b.Property<int>("IdLineadeventa")
                        .HasColumnName("idLineadeventa")
                        .HasColumnType("int");

                    b.Property<int?>("Cantidad")
                        .HasColumnName("cantidad")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnName("productoId")
                        .HasColumnType("int");

                    b.Property<double?>("Subtotal")
                        .HasColumnName("subtotal")
                        .HasColumnType("float");

                    b.Property<int>("VentaId")
                        .HasColumnName("ventaId")
                        .HasColumnType("int");

                    b.HasKey("IdLineadeventa")
                        .HasName("PK__LineaDeV__547E370148B313E6");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId");

                    b.ToTable("LineaDeVenta");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Liquidacion", b =>
                {
                    b.Property<int>("IdLiquidacion")
                        .HasColumnName("idLiquidacion")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnName("empleadoId")
                        .HasColumnType("int");

                    b.Property<byte?>("Estado")
                        .HasColumnName("estado")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("FechaDesde")
                        .HasColumnName("fechaDesde")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaHasta")
                        .HasColumnName("fechaHasta")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PeriodoLiquidacion")
                        .HasColumnName("periodoLiquidacion")
                        .HasColumnType("date");

                    b.Property<double?>("Retenciones")
                        .HasColumnName("retenciones")
                        .HasColumnType("float");

                    b.Property<double?>("SalarioBruto")
                        .HasColumnName("salarioBruto")
                        .HasColumnType("float");

                    b.Property<double?>("SalarioNeto")
                        .HasColumnName("salarioNeto")
                        .HasColumnType("float");

                    b.HasKey("IdLiquidacion")
                        .HasName("PK__Liquidac__AD38F40F69F34AD9");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Liquidacion");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Marca", b =>
                {
                    b.Property<int>("IdMarca")
                        .HasColumnName("idMarca")
                        .HasColumnType("int");

                    b.Property<int?>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("IdMarca")
                        .HasName("PK__Marca__703318124DE92BF2");

                    b.ToTable("Marca");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.MovimientoCaja", b =>
                {
                    b.Property<int>("IdMovimientoCaja")
                        .HasColumnName("idMovimientoCaja")
                        .HasColumnType("int");

                    b.Property<int>("CajaId")
                        .HasColumnName("cajaId")
                        .HasColumnType("int");

                    b.Property<int>("CompraId")
                        .HasColumnName("compraId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("VentaId")
                        .HasColumnName("ventaId")
                        .HasColumnType("int");

                    b.HasKey("IdMovimientoCaja")
                        .HasName("PK__Movimien__77EEFB2DDAABD479");

                    b.HasIndex("CajaId");

                    b.HasIndex("CompraId");

                    b.HasIndex("VentaId");

                    b.ToTable("MovimientoCaja");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Pago", b =>
                {
                    b.Property<int>("IdPago")
                        .HasColumnName("idPago")
                        .HasColumnType("int");

                    b.Property<double?>("Monto")
                        .HasColumnName("monto")
                        .HasColumnType("float");

                    b.Property<int>("VentaId")
                        .HasColumnName("ventaId")
                        .HasColumnType("int");

                    b.Property<double?>("Vuelto")
                        .HasColumnName("vuelto")
                        .HasColumnType("float");

                    b.HasKey("IdPago")
                        .HasName("PK__Pago__BD2295AD89B57E9B");

                    b.HasIndex("VentaId")
                        .IsUnique()
                        .HasName("UQ__Pago__40B8EB5565F786B6");

                    b.ToTable("Pago");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Producto", b =>
                {
                    b.Property<int>("IdProducto")
                        .HasColumnName("idProducto")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnName("categoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<byte?>("Estado")
                        .HasColumnName("estado")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnName("fechaVencimiento")
                        .HasColumnType("date");

                    b.Property<byte[]>("Foto")
                        .HasColumnName("foto")
                        .HasColumnType("image");

                    b.Property<int>("MarcaId")
                        .HasColumnName("marcaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<double?>("PrecioCompra")
                        .HasColumnName("precioCompra")
                        .HasColumnType("float");

                    b.Property<double?>("PrecioVenta")
                        .HasColumnName("precioVenta")
                        .HasColumnType("float");

                    b.Property<int>("ProveedorId")
                        .HasColumnName("proveedorId")
                        .HasColumnType("int");

                    b.Property<int?>("Stock")
                        .HasColumnName("stock")
                        .HasColumnType("int");

                    b.HasKey("IdProducto")
                        .HasName("PK__Producto__07F4A1322C9C8904");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("MarcaId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Proveedor", b =>
                {
                    b.Property<int>("IdProveedor")
                        .HasColumnName("idProveedor")
                        .HasColumnType("int");

                    b.Property<int>("CompraId")
                        .HasColumnName("compraId")
                        .HasColumnType("int");

                    b.Property<int?>("Cuit")
                        .HasColumnName("cuit")
                        .HasColumnType("int");

                    b.Property<string>("RazonSocial")
                        .HasColumnName("razonSocial")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("Telefono")
                        .HasColumnName("telefono")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("IdProveedor")
                        .HasName("PK__Proveedo__A3FA8E6BB53D4BFD");

                    b.HasIndex("CompraId");

                    b.ToTable("Proveedor");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.SubCategoria", b =>
                {
                    b.Property<int>("IdSubcategoria")
                        .HasColumnName("idSubcategoria")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnName("categoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.HasKey("IdSubcategoria")
                        .HasName("PK__SubCateg__8EA501869E5A1067");

                    b.HasIndex("CategoriaId");

                    b.ToTable("SubCategoria");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Venta", b =>
                {
                    b.Property<int>("IdVenta")
                        .HasColumnName("idVenta")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnName("empleadoId")
                        .HasColumnType("int");

                    b.Property<byte?>("Estado")
                        .HasColumnName("ESTADO")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("FechaVenta")
                        .HasColumnName("fechaVenta")
                        .HasColumnType("datetime");

                    b.Property<double?>("Total")
                        .HasColumnName("TOTAL")
                        .HasColumnType("float");

                    b.HasKey("IdVenta")
                        .HasName("PK__Venta__077D56147832A66E");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Capacidad", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Producto", "Producto")
                        .WithMany("Capacidad")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK__Capacidad__produ__2E70E1FD")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.DetalleLiquidacion", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Concepto", "Concepto")
                        .WithMany("DetalleLiquidacion")
                        .HasForeignKey("ConceptoId")
                        .HasConstraintName("FK__DetalleLi__conce__0FEC5ADD")
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.Liquidacion", "Liquidacion")
                        .WithMany("DetalleLiquidacion")
                        .HasForeignKey("LiquidacionId")
                        .HasConstraintName("FK__DetalleLi__liqui__10E07F16")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Empleado", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.AspNetUsers", "User")
                        .WithOne("Empleado")
                        .HasForeignKey("FarmaciaAvellaneda.Models.Empleado", "UserId")
                        .HasConstraintName("FK__Empleado__userId__056ECC6A")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.GrupoFamiliar", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Empleado", "Empleado")
                        .WithMany("GrupoFamiliar")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK__GrupoFami__emple__084B3915")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.LineaDeCompra", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Compra", "Compra")
                        .WithMany("LineaDeCompra")
                        .HasForeignKey("CompraId")
                        .HasConstraintName("FK__LineaDeCo__compr__314D4EA8")
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.Producto", "Producto")
                        .WithMany("LineaDeCompra")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK__LineaDeCo__produ__324172E1")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.LineaDeVenta", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Producto", "Producto")
                        .WithMany("LineaDeVenta")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK__LineaDeVe__produ__2B947552")
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.Venta", "Venta")
                        .WithMany("LineaDeVenta")
                        .HasForeignKey("VentaId")
                        .HasConstraintName("FK__LineaDeVe__venta__2AA05119")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Liquidacion", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Empleado", "Empleado")
                        .WithMany("Liquidacion")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK__Liquidaci__emple__0B27A5C0")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.MovimientoCaja", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Caja", "Caja")
                        .WithMany("MovimientoCaja")
                        .HasForeignKey("CajaId")
                        .HasConstraintName("FK__Movimient__cajaI__58671BC9")
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.Compra", "Compra")
                        .WithMany("MovimientoCaja")
                        .HasForeignKey("CompraId")
                        .HasConstraintName("FK__Movimient__compr__595B4002")
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.Venta", "Venta")
                        .WithMany("MovimientoCaja")
                        .HasForeignKey("VentaId")
                        .HasConstraintName("FK__Movimient__venta__5A4F643B")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Pago", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Venta", "Venta")
                        .WithOne("Pago")
                        .HasForeignKey("FarmaciaAvellaneda.Models.Pago", "VentaId")
                        .HasConstraintName("FK__Pago__ventaId__178D7CA5")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Producto", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Categoria", "Categoria")
                        .WithMany("Producto")
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("FK__Producto__catego__25DB9BFC")
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.Marca", "Marca")
                        .WithMany("Producto")
                        .HasForeignKey("MarcaId")
                        .HasConstraintName("FK__Producto__marcaI__26CFC035")
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.Proveedor", "Proveedor")
                        .WithMany("Producto")
                        .HasForeignKey("ProveedorId")
                        .HasConstraintName("FK__Producto__provee__27C3E46E")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Proveedor", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Compra", "Compra")
                        .WithMany("Proveedor")
                        .HasForeignKey("CompraId")
                        .HasConstraintName("FK__Proveedor__compr__22FF2F51")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.SubCategoria", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Categoria", "Categoria")
                        .WithMany("SubCategoria")
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("FK__SubCatego__categ__1E3A7A34")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Venta", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Empleado", "Empleado")
                        .WithMany("Venta")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK__Venta__empleadoI__13BCEBC1")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
