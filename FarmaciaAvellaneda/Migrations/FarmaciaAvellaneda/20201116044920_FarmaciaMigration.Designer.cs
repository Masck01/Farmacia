// <auto-generated />
using System;
using FarmaciaAvellaneda.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FarmaciaAvellaneda.Migrations.FarmaciaAvellaneda
{
    [DbContext(typeof(FarmaciaAvellanedaContext))]
    [Migration("20201116044920_FarmaciaMigration")]
    partial class FarmaciaMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Caja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("Estado")
                        .HasColumnName("estado")
                        .HasColumnType("tinyint");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("Saldo")
                        .HasColumnName("saldo")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Caja");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Capacidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Cantidad")
                        .HasColumnName("cantidad")
                        .HasColumnType("int");

                    b.Property<byte?>("Estado")
                        .HasColumnName("estado")
                        .HasColumnType("tinyint");

                    b.Property<int>("ProductoId")
                        .HasColumnName("productoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("Capacidad");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("Estado")
                        .HasColumnName("estado")
                        .HasColumnType("tinyint");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Fecha")
                        .HasColumnName("fecha")
                        .HasColumnType("datetime");

                    b.Property<double?>("Total")
                        .HasColumnName("total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Compra");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Concepto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<double?>("MontoFijo")
                        .HasColumnName("montoFijo")
                        .HasColumnType("float");

                    b.Property<double?>("MontoVariable")
                        .HasColumnName("montoVariable")
                        .HasColumnType("float");

                    b.Property<byte?>("Tipo")
                        .HasColumnName("tipo")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Concepto");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.DetalleLiquidacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConceptoId")
                        .HasColumnName("conceptoId")
                        .HasColumnType("int");

                    b.Property<string>("Haberes")
                        .HasColumnName("haberes")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int>("LiquidacionId")
                        .HasColumnName("liquidacionId")
                        .HasColumnType("int");

                    b.Property<int?>("Unidad")
                        .HasColumnName("unidad")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConceptoId");

                    b.HasIndex("LiquidacionId");

                    b.ToTable("DetalleLiquidacion");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .HasColumnName("apellido")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Celular")
                        .HasColumnName("celular")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("Cuit")
                        .HasColumnName("cuit")
                        .HasColumnType("int");

                    b.Property<string>("Domicilio")
                        .HasColumnName("domicilio")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<byte?>("Estado")
                        .HasColumnName("estado")
                        .HasColumnType("tinyint");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Telefono")
                        .HasColumnName("telefono")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasName("UQ__Empleado__CB9A1CFE0C54C1C1");

                    b.ToTable("Empleado");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.GrupoFamiliar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .HasColumnName("apellido")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("Dni")
                        .HasColumnName("dni")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnName("empleadoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnName("fechaNacimiento")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Parentesco")
                        .HasColumnName("parentesco")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("GrupoFamiliar");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.LineaCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Cantidad")
                        .HasColumnName("cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CompraId")
                        .HasColumnName("compraId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnName("productoId")
                        .HasColumnType("int");

                    b.Property<double?>("Subtotal")
                        .HasColumnName("subtotal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CompraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("LineaCompra");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.LineaVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Cantidad")
                        .HasColumnName("cantidad")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnName("productoId")
                        .HasColumnType("int");

                    b.Property<double?>("Subtotal")
                        .HasColumnName("subtotal")
                        .HasColumnType("float");

                    b.Property<int>("VentaId")
                        .HasColumnName("ventaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId");

                    b.ToTable("LineaVenta");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Liquidacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmpleadoId")
                        .HasColumnName("empleadoId")
                        .HasColumnType("int");

                    b.Property<byte?>("Estado")
                        .HasColumnName("estado")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("FechaDesde")
                        .HasColumnName("fechaDesde")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaHasta")
                        .HasColumnName("fechaHasta")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PeriodoLiquidacion")
                        .HasColumnName("periodoLiquidacion")
                        .HasColumnType("date");

                    b.Property<double?>("Retenciones")
                        .HasColumnName("retenciones")
                        .HasColumnType("float");

                    b.Property<double?>("SalarioBruto")
                        .HasColumnName("salarioBruto")
                        .HasColumnType("float");

                    b.Property<double?>("SalarioNeto")
                        .HasColumnName("salarioNeto")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Liquidacion");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Marca");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.MovimientoCaja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CajaId")
                        .HasColumnName("cajaId")
                        .HasColumnType("int");

                    b.Property<int>("CompraId")
                        .HasColumnName("compraId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("VentaId")
                        .HasColumnName("ventaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CajaId");

                    b.HasIndex("CompraId");

                    b.HasIndex("VentaId");

                    b.ToTable("MovimientoCaja");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Monto")
                        .HasColumnName("monto")
                        .HasColumnType("float");

                    b.Property<int>("VentaId")
                        .HasColumnName("ventaId")
                        .HasColumnType("int");

                    b.Property<double?>("Vuelto")
                        .HasColumnName("vuelto")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("VentaId")
                        .IsUnique()
                        .HasName("UQ__Pago__40B8EB55B2137B6A");

                    b.ToTable("Pago");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriaId")
                        .HasColumnName("categoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<byte?>("Estado")
                        .HasColumnName("estado")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnName("fechaVencimiento")
                        .HasColumnType("date");

                    b.Property<byte[]>("Foto")
                        .HasColumnName("foto")
                        .HasColumnType("image");

                    b.Property<int>("MarcaId")
                        .HasColumnName("marcaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<double?>("PrecioCompra")
                        .HasColumnName("precioCompra")
                        .HasColumnType("float");

                    b.Property<double?>("PrecioVenta")
                        .HasColumnName("precioVenta")
                        .HasColumnType("float");

                    b.Property<int>("ProveedorId")
                        .HasColumnName("proveedorId")
                        .HasColumnType("int");

                    b.Property<int?>("Stock")
                        .HasColumnName("stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("MarcaId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompraId")
                        .HasColumnName("compraId")
                        .HasColumnType("int");

                    b.Property<int?>("Cuit")
                        .HasColumnName("cuit")
                        .HasColumnType("int");

                    b.Property<string>("RazonSocial")
                        .HasColumnName("razonSocial")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("Telefono")
                        .HasColumnName("telefono")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CompraId");

                    b.ToTable("Proveedor");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.SubCategoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriaId")
                        .HasColumnName("categoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("SubCategoria");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmpleadoId")
                        .HasColumnName("empleadoId")
                        .HasColumnType("int");

                    b.Property<byte?>("Estado")
                        .HasColumnName("ESTADO")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("FechaVenta")
                        .HasColumnName("fechaVenta")
                        .HasColumnType("datetime");

                    b.Property<double?>("Total")
                        .HasColumnName("TOTAL")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Capacidad", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Producto", "Producto")
                        .WithMany("Capacidad")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK__Capacidad__produ__6B1AC8E1")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.DetalleLiquidacion", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Concepto", "Concepto")
                        .WithMany("DetalleLiquidacion")
                        .HasForeignKey("ConceptoId")
                        .HasConstraintName("FK__DetalleLi__conce__4C9641C1")
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.Liquidacion", "Liquidacion")
                        .WithMany("DetalleLiquidacion")
                        .HasForeignKey("LiquidacionId")
                        .HasConstraintName("FK__DetalleLi__liqui__4D8A65FA")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Empleado", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.AspNetUsers", "User")
                        .WithOne("Empleado")
                        .HasForeignKey("FarmaciaAvellaneda.Models.Empleado", "UserId")
                        .HasConstraintName("FK__Empleado__userId__4218B34E")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.GrupoFamiliar", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Empleado", "Empleado")
                        .WithMany("GrupoFamiliar")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK__GrupoFami__emple__44F51FF9")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.LineaCompra", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Compra", "Compra")
                        .WithMany("LineaCompra")
                        .HasForeignKey("CompraId")
                        .HasConstraintName("FK__LineaComp__compr__6DF7358C")
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.Producto", "Producto")
                        .WithMany("LineaCompra")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK__LineaComp__produ__6EEB59C5")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.LineaVenta", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Producto", "Producto")
                        .WithMany("LineaVenta")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK__LineaVent__produ__683E5C36")
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.Venta", "Venta")
                        .WithMany("LineaVenta")
                        .HasForeignKey("VentaId")
                        .HasConstraintName("FK__LineaVent__venta__674A37FD")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Liquidacion", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Empleado", "Empleado")
                        .WithMany("Liquidacion")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK__Liquidaci__emple__47D18CA4")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.MovimientoCaja", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Caja", "Caja")
                        .WithMany("MovimientoCaja")
                        .HasForeignKey("CajaId")
                        .HasConstraintName("FK__Movimient__cajaI__73B00EE2")
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.Compra", "Compra")
                        .WithMany("MovimientoCaja")
                        .HasForeignKey("CompraId")
                        .HasConstraintName("FK__Movimient__compr__74A4331B")
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.Venta", "Venta")
                        .WithMany("MovimientoCaja")
                        .HasForeignKey("VentaId")
                        .HasConstraintName("FK__Movimient__venta__75985754")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Pago", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Venta", "Venta")
                        .WithOne("Pago")
                        .HasForeignKey("FarmaciaAvellaneda.Models.Pago", "VentaId")
                        .HasConstraintName("FK__Pago__ventaId__54376389")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Producto", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Categoria", "Categoria")
                        .WithMany("Producto")
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("FK__Producto__catego__628582E0")
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.Marca", "Marca")
                        .WithMany("Producto")
                        .HasForeignKey("MarcaId")
                        .HasConstraintName("FK__Producto__marcaI__6379A719")
                        .IsRequired();

                    b.HasOne("FarmaciaAvellaneda.Models.Proveedor", "Proveedor")
                        .WithMany("Producto")
                        .HasForeignKey("ProveedorId")
                        .HasConstraintName("FK__Producto__provee__646DCB52")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Proveedor", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Compra", "Compra")
                        .WithMany("Proveedor")
                        .HasForeignKey("CompraId")
                        .HasConstraintName("FK__Proveedor__compr__5FA91635")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.SubCategoria", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Categoria", "Categoria")
                        .WithMany("SubCategoria")
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("FK__SubCatego__categ__5AE46118")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmaciaAvellaneda.Models.Venta", b =>
                {
                    b.HasOne("FarmaciaAvellaneda.Models.Empleado", "Empleado")
                        .WithMany("Venta")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK__Venta__empleadoI__5066D2A5")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
